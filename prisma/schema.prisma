//npx prisma migrate dev --name init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String    @id @unique @default(uuid())
  username        String    @unique
  solanaWallet    String?   @unique @db.VarChar(256)
  ethWallet       String?   @unique @db.VarChar(256)
  picture         String?   @db.VarChar(256)
  discordName     String?   @unique
  description     String?   @db.VarChar(256)
  discordId       String?   @unique
  twitterName     String?   @unique
  twitterId       String?   @unique
  color           String    @default("#000000")
  defaultIcon     String?
  defaultProvider String?   @default("eth")
  isModerator     Boolean   @default(false)
  isBanned        Boolean   @default(false)
  isMuted         Boolean   @default(false)
  mutedUntil      DateTime?
  bannedUntil     DateTime?
  messages      Message[]
  sessions      UserSession[]
  subscriptions Subscription[]
  restrictions  RoomRestriction[] // Ajout des restrictions de room
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @default(now()) @updatedAt
  lastLogin     DateTime?
}

model Room {
  id           String            @id @unique @default(uuid())
  name         String            @unique
  messages     Message[]
  sessions     UserSession[]
  subscribers  Subscription[]
  restrictions RoomRestriction[] // Ajout des restrictions de room
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now()) @updatedAt
  RoomBadge    RoomBadge[]
}

model Message {
  id          String   @id @unique @default(uuid())
  content     String   @db.VarChar(256)
  createdAt   DateTime @default(now())
  isModerated Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  roomId      String
  room        Room     @relation(fields: [roomId], references: [id])
}

model UserSession {
  id             String    @id @unique @default(uuid())
  websocketId    String    @unique
  userId         String?
  user           User?     @relation(fields: [userId], references: [id])
  roomId         String
  room           Room      @relation(fields: [roomId], references: [id])
  connectedAt    DateTime  @default(now())
  disconnectedAt DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
}

model Subscription {
  id             String   @id @unique @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  roomId         String
  room           Room     @relation(fields: [roomId], references: [id])
  createdAt      DateTime @default(now())
  purchaseDate   DateTime @default(now())
  expirationDate DateTime
  amountPaid     Float?
  updatedAt      DateTime @default(now()) @updatedAt
}

model RoomRestriction {
  id          String    @id @unique @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  roomId      String
  room        Room      @relation(fields: [roomId], references: [id])
  isBanned    Boolean   @default(false) // Indique si l'utilisateur est banni
  isMuted     Boolean   @default(false) // Indique si l'utilisateur est en sourdine
  mutedUntil  DateTime? // Indique la date jusqu'à laquelle l'utilisateur est en sourdine
  bannedUntil DateTime? // Indique la date jusqu'à laquelle l'utilisateur est banni
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model RoomBadge {
  id        String   @id @unique @default(uuid())
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])
  badgeId   String
  badge     Badge    @relation(fields: [badgeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Badge {
  id          String      @id @unique @default(uuid())
  name        String      @unique
  description String
  icon        String      @db.VarChar(256)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
  RoomBadge   RoomBadge[]
}
